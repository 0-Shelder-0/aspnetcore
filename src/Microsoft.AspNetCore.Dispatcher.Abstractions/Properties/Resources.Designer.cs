// <auto-generated />
namespace Microsoft.AspNetCore.Dispatcher.Abstractions
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Dispatcher.Abstractions.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// An element with the key '{0}' already exists in the {1}.
        /// </summary>
        internal static string DispatcherValueCollection_DuplicateKey
        {
            get => GetString("DispatcherValueCollection_DuplicateKey");
        }

        /// <summary>
        /// An element with the key '{0}' already exists in the {1}.
        /// </summary>
        internal static string FormatDispatcherValueCollection_DuplicateKey(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("DispatcherValueCollection_DuplicateKey"), p0, p1);

        /// <summary>
        /// The type '{0}' defines properties '{1}' and '{2}' which differ only by casing. This is not supported by {3} which uses case-insensitive comparisons.
        /// </summary>
        internal static string DispatcherValueCollection_DuplicatePropertyName
        {
            get => GetString("DispatcherValueCollection_DuplicatePropertyName");
        }

        /// <summary>
        /// The type '{0}' defines properties '{1}' and '{2}' which differ only by casing. This is not supported by {3} which uses case-insensitive comparisons.
        /// </summary>
        internal static string FormatDispatcherValueCollection_DuplicatePropertyName(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("DispatcherValueCollection_DuplicatePropertyName"), p0, p1, p2, p3);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
