// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using Microsoft.DotNet.Cli.Utils;
using Microsoft.Extensions.Logging;

namespace Microsoft.Extensions.SecretManager.Tools.Internal
{
    public class ProjectIdResolver
    {
        private readonly ILogger _logger;
        private readonly string _workingDirectory;

        public ProjectIdResolver(ILogger logger, string workingDirectory)
        {
            _workingDirectory = workingDirectory;
            _logger = logger;
        }

        public string Resolve(string project, string configuration = Constants.DefaultConfiguration)
        {
            var finder = new MsBuildProjectFinder(_workingDirectory);
            var projectFile = finder.FindMsBuildProject(project);
            EnsureProjectExtensionTargetsExist(projectFile);

            _logger.LogDebug(Resources.Message_Project_File_Path, projectFile);

            var commandOutput = new List<string>();
            var outputFile = Path.GetTempFileName();
            try
            {
                var commandResult = Command.CreateDotNet("msbuild",
                    new[] {
                        projectFile,
                        "/nologo",
                        "/t:_ExtractUserSecretsMetadata", // defined in ProjectIdResolverTargets.xml
                        $"/p:_UserSecretsMetadataFile={outputFile}",
                        $"/p:Configuration={configuration}"
                    })
                    .CaptureStdErr()
                    .CaptureStdOut()
                    .OnErrorLine(l => commandOutput.Add(l))
                    .OnOutputLine(l => commandOutput.Add(l))
                    .Execute();

                if (commandResult.ExitCode != 0)
                {
                    _logger.LogDebug(string.Join(Environment.NewLine, commandOutput));
                    throw new GracefulException(Resources.FormatError_ProjectFailedToLoad(projectFile));
                }

                var id = File.ReadAllText(outputFile)?.Trim();
                if (string.IsNullOrEmpty(id))
                {
                    throw new GracefulException(Resources.FormatError_ProjectMissingId(projectFile));
                }

                return id;

            }
            finally
            {
                TryDelete(outputFile);
            }
        }

        private void EnsureProjectExtensionTargetsExist(string projectFile)
        {
            // relies on MSBuildProjectExtensionsPath and Microsoft.Common.targets to import this file
            // into the target project
            var projectExtensionsPath = Path.Combine(
                Path.GetDirectoryName(projectFile),
                "obj",
                $"{Path.GetFileName(projectFile)}.usersecrets.targets");

            Directory.CreateDirectory(Path.GetDirectoryName(projectExtensionsPath));

            // should overwrite the file always. Hypothetically, another version of the user-secrets tool
            // could have already put a file here. We want to ensure the target file matches the currently
            // running tool
            using (var resource = GetType().GetTypeInfo().Assembly.GetManifestResourceStream("ProjectIdResolverTargets.xml"))
            using (var stream = new FileStream(projectExtensionsPath, FileMode.Create))
            using (var writer = new StreamWriter(stream))
            {
                writer.WriteLine("<!-- Auto-generated by dotnet-user-secrets. This file can be deleted and should not be commited to source control. -->");
                resource.CopyTo(stream);
            }
        }

        private static void TryDelete(string file)
        {
            try
            {
                if (File.Exists(file))
                {
                    File.Delete(file);
                }
            }
            catch
            {
                // whatever
            }
        }
    }
}