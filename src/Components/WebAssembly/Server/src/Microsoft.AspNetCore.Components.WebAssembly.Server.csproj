<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>$(DefaultNetCoreTargetFramework)</TargetFramework>
    <Description>Runtime server features for ASP.NET Core Blazor applications.</Description>
    <IsShippingPackage>true</IsShippingPackage>
    <HasReferenceAssembly>false</HasReferenceAssembly>

    <!-- We're deliberately bundling assemblies as content files. Suppress the warning. -->
    <NoWarn>$(NoWarn);NU5100</NoWarn>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="Microsoft.AspNetCore.StaticFiles" />
    <Reference Include="Microsoft.AspNetCore.Components.WebAssembly.DebugProxy" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Microsoft.AspNetCore.Components.WebAssembly.Server.Tests" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="$(ComponentsSharedSourceRoot)\src\CacheHeaderSettings.cs" Link="Shared\CacheHeaderSettings.cs" />
    <Compile Include="$(SharedSourceRoot)\CommandLineUtils\Utilities\DotNetMuxer.cs" Link="Shared\DotNetMuxer.cs" />

    <Content Include="build\**" Pack="true" PackagePath="build\%(RecursiveDir)%(FileName)%(Extension)" />
  </ItemGroup>

  <!-- Emit debug proxy binaries to output directory. This lets us launch it as a separate process while keeping the build output self-contained.  -->
  <Target Name="IncludeDebugProxyBinariesAsContent" BeforeTargets="AssignTargetPaths">
    <ItemGroup>
      <DebugProxyBinaries Include="$(NuGetPackageRoot)\microsoft.aspnetcore.components.webassembly.debugproxy\$(MicrosoftAspNetCoreComponentsWebAssemblyRuntimePackageVersion)\tools\**" />

      <!--
        For when we're building a package, we use Pack and PackagePath to bundle the debug proxy binaries into 'tools'.
        Then we have a custom build target that converts these items into content files in consuming projects. We *don't*
        use PackageCopyToOutput because that creates entries that show up in Solution Explorer in consuming projects.

        For when we're consuming this from source in this repo, we use Link and CopyToOutputDirectory to produce the
        same effect without having the custom build target.
      -->
      <Content
        Include="@(DebugProxyBinaries)"
        Pack="true"
        PackagePath="tools\BlazorDebugProxy\%(RecursiveDir)%(FileName)%(Extension)"
        Link="BlazorDebugProxy\%(RecursiveDir)%(FileName)%(Extension)"
        CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

</Project>
