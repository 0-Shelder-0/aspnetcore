@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using System.Security.Cryptography;
@namespace BasicTestApp
<h1>Counter</h1>

<p>Current count: @currentCount</p>
<p id="errormessage">Error = @error</p>
<button id="triggerjsinterop" @onclick="@TriggerJSInterop"></button>

<button id="thecounter" @onclick="@IncrementCount">Click me</button>

<p>Expensive field to compute = @ComputeExpensiveField()</p>

@code {
    int currentCount = 0;
    string error = "";
    byte[] dataHolder = new byte[1024 * 1024];
    RandomNumberGenerator rnd = RandomNumberGenerator.Create();

    void IncrementCount()
    {
        currentCount++;
    }

    async Task TriggerJSInterop()
    {
        try
        {
            var result = await JSRuntime.InvokeAsync<int>(
                "sendMalformedCallbackReturn",
                Array.Empty<object>());
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    public string ComputeExpensiveField()
    {
        rnd.GetBytes(dataHolder);
        return Convert.ToBase64String(dataHolder);
    }
}
