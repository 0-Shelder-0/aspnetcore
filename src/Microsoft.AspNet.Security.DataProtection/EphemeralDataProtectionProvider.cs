// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using Microsoft.AspNet.Security.DataProtection.AuthenticatedEncryption;
using Microsoft.AspNet.Security.DataProtection.Cng;
using Microsoft.AspNet.Security.DataProtection.KeyManagement;
using Microsoft.Framework.OptionsModel;

namespace Microsoft.AspNet.Security.DataProtection
{
    /// <summary>
    /// An IDataProtectionProvider that is transient.
    /// </summary>
    /// <remarks>
    /// Payloads generated by a given EphemeralDataProtectionProvider instance can only
    /// be deciphered by that same instance. Once the instance is lost, all ciphertexts
    /// generated by that instance are permanently undecipherable.
    /// </remarks>
    public sealed class EphemeralDataProtectionProvider : IDataProtectionProvider
    {
        private readonly KeyRingBasedDataProtectionProvider _dataProtectionProvider;

        public EphemeralDataProtectionProvider()
        {
            IKeyRingProvider keyringProvider;

            if (OSVersionUtil.IsBCryptOnWin7OrLaterAvailable())
            {
                // Fastest implementation: AES-GCM
                keyringProvider = new CngEphemeralKeyRing();
            }
            else
            {
                // Slowest implementation: managed CBC + HMAC
                keyringProvider = new ManagedEphemeralKeyRing();
            }

            _dataProtectionProvider = new KeyRingBasedDataProtectionProvider(keyringProvider);
        }

        public IDataProtector CreateProtector([NotNull] string purpose)
        {
            // just forward to the underlying provider
            return _dataProtectionProvider.CreateProtector(purpose);
        }

        private sealed class DefaultOptionsAccessor<T> : IOptions<T> where T : class, new()
        {
            public T Options { get; } = new T();

            public T GetNamedOptions(string name)
            {
                return Options;
            }
        }

        // A special key ring that only understands one key id and which uses CNG.
        private sealed class CngEphemeralKeyRing : IKeyRing, IKeyRingProvider
        {
            public IAuthenticatedEncryptor DefaultAuthenticatedEncryptor { get; } = new CngGcmAuthenticatedEncryptorConfigurationFactory(new DefaultOptionsAccessor<CngGcmAuthenticatedEncryptorConfigurationOptions>()).CreateNewConfiguration().CreateEncryptorInstance();

            public Guid DefaultKeyId { get; } = default(Guid);

            public IAuthenticatedEncryptor GetAuthenticatedEncryptorByKeyId(Guid keyId, out bool isRevoked)
            {
                isRevoked = false;
                return (keyId == default(Guid)) ? DefaultAuthenticatedEncryptor : null;
            }

            public IKeyRing GetCurrentKeyRing()
            {
                return this;
            }
        }

        // A special key ring that only understands one key id and which uses managed CBC + HMAC.
        private sealed class ManagedEphemeralKeyRing : IKeyRing, IKeyRingProvider
        {
            public IAuthenticatedEncryptor DefaultAuthenticatedEncryptor { get; } = new ManagedAuthenticatedEncryptorConfigurationFactory(new DefaultOptionsAccessor<ManagedAuthenticatedEncryptorConfigurationOptions>()).CreateNewConfiguration().CreateEncryptorInstance();

            public Guid DefaultKeyId { get; } = default(Guid);

            public IAuthenticatedEncryptor GetAuthenticatedEncryptorByKeyId(Guid keyId, out bool isRevoked)
            {
                isRevoked = false;
                return (keyId == default(Guid)) ? DefaultAuthenticatedEncryptor : null;
            }

            public IKeyRing GetCurrentKeyRing()
            {
                return this;
            }
        }
    }
}
