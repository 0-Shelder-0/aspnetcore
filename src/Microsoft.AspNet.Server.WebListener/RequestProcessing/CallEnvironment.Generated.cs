//-----------------------------------------------------------------------
// <copyright>
//   Copyright (c) Katana Contributors. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------
// <auto-generated />

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Security.Authentication.ExtendedProtection;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.AspNet.Server.WebListener
{
    using OpaqueUpgrade = Action<IDictionary<string, object>, Func<IDictionary<string, object>, Task>>;

    [GeneratedCode("TextTemplatingFileGenerator", "")]
    internal partial class CallEnvironment
    {
        // Mark all fields with delay initialization support as set.
        private UInt32 _flag0 = 0x43e00200u;
        private UInt32 _flag1 = 0x1u;
        // Mark all fields with delay initialization support as requiring initialization.
        private UInt32 _initFlag0 = 0x43e00200u;
        private UInt32 _initFlag1 = 0x1u;

        internal interface IPropertySource
        {
            Stream GetRequestBody();
            string GetRemoteIpAddress();
            string GetRemotePort();
            string GetLocalIpAddress();
            string GetLocalPort();
            bool GetIsLocal();
            bool TryGetChannelBinding(ref ChannelBinding value);
            bool TryGetOpaqueUpgrade(ref OpaqueUpgrade value);
        }

        private string _OwinVersion;
        private CancellationToken _CallCancelled;
        private string _RequestProtocol;
        private string _RequestMethod;
        private string _RequestScheme;
        private string _RequestPathBase;
        private string _RequestPath;
        private string _RequestQueryString;
        private IDictionary<string, string[]> _RequestHeaders;
        private Stream _RequestBody;
        private IDictionary<string, string[]> _ResponseHeaders;
        private Stream _ResponseBody;
        private int? _ResponseStatusCode;
        private string _ResponseReasonPhrase;
        private TextWriter _HostTraceOutput;
        private string _HostAppName;
        private string _HostAppMode;
        private CancellationToken _OnAppDisposing;
        private System.Security.Principal.IPrincipal _User;
        private Action<Action<object>, object> _OnSendingHeaders;
        private IDictionary<string, object> _ServerCapabilities;
        private string _RemoteIpAddress;
        private string _RemotePort;
        private string _LocalIpAddress;
        private string _LocalPort;
        private bool _IsLocal;
        private object _ConnectionId;
        private CancellationToken _ConnectionDisconnect;
        private object _ClientCert;
        private Func<Task> _LoadClientCert;
        private ChannelBinding _ChannelBinding;
        private Func<string, long, long?, CancellationToken, Task> _SendFileAsync;
        private OpaqueUpgrade _OpaqueUpgrade;
        private OwinWebListener _Listener;

        bool InitPropertyChannelBinding()
        {
            if (!_propertySource.TryGetChannelBinding(ref _ChannelBinding))
            {
                _flag0 &= ~0x40000000u;
                _initFlag0 &= ~0x40000000u;
                return false;
            }
            _initFlag0 &= ~0x40000000u;
            return true;
        }

        bool InitPropertyOpaqueUpgrade()
        {
            if (!_propertySource.TryGetOpaqueUpgrade(ref _OpaqueUpgrade))
            {
                _flag1 &= ~0x1u;
                _initFlag1 &= ~0x1u;
                return false;
            }
            _initFlag1 &= ~0x1u;
            return true;
        }

        internal string OwinVersion
        {
            get
            {
                return _OwinVersion;
            }
            set
            {
                _flag0 |= 0x1u;
                _OwinVersion = value;
            }
        }

        internal CancellationToken CallCancelled
        {
            get
            {
                return _CallCancelled;
            }
            set
            {
                _flag0 |= 0x2u;
                _CallCancelled = value;
            }
        }

        internal string RequestProtocol
        {
            get
            {
                return _RequestProtocol;
            }
            set
            {
                _flag0 |= 0x4u;
                _RequestProtocol = value;
            }
        }

        internal string RequestMethod
        {
            get
            {
                return _RequestMethod;
            }
            set
            {
                _flag0 |= 0x8u;
                _RequestMethod = value;
            }
        }

        internal string RequestScheme
        {
            get
            {
                return _RequestScheme;
            }
            set
            {
                _flag0 |= 0x10u;
                _RequestScheme = value;
            }
        }

        internal string RequestPathBase
        {
            get
            {
                return _RequestPathBase;
            }
            set
            {
                _flag0 |= 0x20u;
                _RequestPathBase = value;
            }
        }

        internal string RequestPath
        {
            get
            {
                return _RequestPath;
            }
            set
            {
                _flag0 |= 0x40u;
                _RequestPath = value;
            }
        }

        internal string RequestQueryString
        {
            get
            {
                return _RequestQueryString;
            }
            set
            {
                _flag0 |= 0x80u;
                _RequestQueryString = value;
            }
        }

        internal IDictionary<string, string[]> RequestHeaders
        {
            get
            {
                return _RequestHeaders;
            }
            set
            {
                _flag0 |= 0x100u;
                _RequestHeaders = value;
            }
        }

        internal Stream RequestBody
        {
            get
            {
                if (((_initFlag0 & 0x200u) != 0))
                {
                    _RequestBody = _propertySource.GetRequestBody();
                    _initFlag0 &= ~0x200u;
                }
                return _RequestBody;
            }
            set
            {
                _initFlag0 &= ~0x200u;
                _flag0 |= 0x200u;
                _RequestBody = value;
            }
        }

        internal IDictionary<string, string[]> ResponseHeaders
        {
            get
            {
                return _ResponseHeaders;
            }
            set
            {
                _flag0 |= 0x400u;
                _ResponseHeaders = value;
            }
        }

        internal Stream ResponseBody
        {
            get
            {
                return _ResponseBody;
            }
            set
            {
                _flag0 |= 0x800u;
                _ResponseBody = value;
            }
        }

        internal int? ResponseStatusCode
        {
            get
            {
                return _ResponseStatusCode;
            }
            set
            {
                _flag0 |= 0x1000u;
                _ResponseStatusCode = value;
            }
        }

        internal string ResponseReasonPhrase
        {
            get
            {
                return _ResponseReasonPhrase;
            }
            set
            {
                _flag0 |= 0x2000u;
                _ResponseReasonPhrase = value;
            }
        }

        internal TextWriter HostTraceOutput
        {
            get
            {
                return _HostTraceOutput;
            }
            set
            {
                _flag0 |= 0x4000u;
                _HostTraceOutput = value;
            }
        }

        internal string HostAppName
        {
            get
            {
                return _HostAppName;
            }
            set
            {
                _flag0 |= 0x8000u;
                _HostAppName = value;
            }
        }

        internal string HostAppMode
        {
            get
            {
                return _HostAppMode;
            }
            set
            {
                _flag0 |= 0x10000u;
                _HostAppMode = value;
            }
        }

        internal CancellationToken OnAppDisposing
        {
            get
            {
                return _OnAppDisposing;
            }
            set
            {
                _flag0 |= 0x20000u;
                _OnAppDisposing = value;
            }
        }

        internal System.Security.Principal.IPrincipal User
        {
            get
            {
                return _User;
            }
            set
            {
                _flag0 |= 0x40000u;
                _User = value;
            }
        }

        internal Action<Action<object>, object> OnSendingHeaders
        {
            get
            {
                return _OnSendingHeaders;
            }
            set
            {
                _flag0 |= 0x80000u;
                _OnSendingHeaders = value;
            }
        }

        internal IDictionary<string, object> ServerCapabilities
        {
            get
            {
                return _ServerCapabilities;
            }
            set
            {
                _flag0 |= 0x100000u;
                _ServerCapabilities = value;
            }
        }

        internal string RemoteIpAddress
        {
            get
            {
                if (((_initFlag0 & 0x200000u) != 0))
                {
                    _RemoteIpAddress = _propertySource.GetRemoteIpAddress();
                    _initFlag0 &= ~0x200000u;
                }
                return _RemoteIpAddress;
            }
            set
            {
                _initFlag0 &= ~0x200000u;
                _flag0 |= 0x200000u;
                _RemoteIpAddress = value;
            }
        }

        internal string RemotePort
        {
            get
            {
                if (((_initFlag0 & 0x400000u) != 0))
                {
                    _RemotePort = _propertySource.GetRemotePort();
                    _initFlag0 &= ~0x400000u;
                }
                return _RemotePort;
            }
            set
            {
                _initFlag0 &= ~0x400000u;
                _flag0 |= 0x400000u;
                _RemotePort = value;
            }
        }

        internal string LocalIpAddress
        {
            get
            {
                if (((_initFlag0 & 0x800000u) != 0))
                {
                    _LocalIpAddress = _propertySource.GetLocalIpAddress();
                    _initFlag0 &= ~0x800000u;
                }
                return _LocalIpAddress;
            }
            set
            {
                _initFlag0 &= ~0x800000u;
                _flag0 |= 0x800000u;
                _LocalIpAddress = value;
            }
        }

        internal string LocalPort
        {
            get
            {
                if (((_initFlag0 & 0x1000000u) != 0))
                {
                    _LocalPort = _propertySource.GetLocalPort();
                    _initFlag0 &= ~0x1000000u;
                }
                return _LocalPort;
            }
            set
            {
                _initFlag0 &= ~0x1000000u;
                _flag0 |= 0x1000000u;
                _LocalPort = value;
            }
        }

        internal bool IsLocal
        {
            get
            {
                if (((_initFlag0 & 0x2000000u) != 0))
                {
                    _IsLocal = _propertySource.GetIsLocal();
                    _initFlag0 &= ~0x2000000u;
                }
                return _IsLocal;
            }
            set
            {
                _initFlag0 &= ~0x2000000u;
                _flag0 |= 0x2000000u;
                _IsLocal = value;
            }
        }

        internal object ConnectionId
        {
            get
            {
                return _ConnectionId;
            }
            set
            {
                _flag0 |= 0x4000000u;
                _ConnectionId = value;
            }
        }

        internal CancellationToken ConnectionDisconnect
        {
            get
            {
                return _ConnectionDisconnect;
            }
            set
            {
                _flag0 |= 0x8000000u;
                _ConnectionDisconnect = value;
            }
        }

        internal object ClientCert
        {
            get
            {
                return _ClientCert;
            }
            set
            {
                _flag0 |= 0x10000000u;
                _ClientCert = value;
            }
        }

        internal Func<Task> LoadClientCert
        {
            get
            {
                return _LoadClientCert;
            }
            set
            {
                _flag0 |= 0x20000000u;
                _LoadClientCert = value;
            }
        }

        internal ChannelBinding ChannelBinding
        {
            get
            {
                if (((_initFlag0 & 0x40000000u) != 0))
                {
                    InitPropertyChannelBinding();
                }
                return _ChannelBinding;
            }
            set
            {
                _initFlag0 &= ~0x40000000u;
                _flag0 |= 0x40000000u;
                _ChannelBinding = value;
            }
        }

        internal Func<string, long, long?, CancellationToken, Task> SendFileAsync
        {
            get
            {
                return _SendFileAsync;
            }
            set
            {
                _flag0 |= 0x80000000u;
                _SendFileAsync = value;
            }
        }

        internal OpaqueUpgrade OpaqueUpgrade
        {
            get
            {
                if (((_initFlag1 & 0x1u) != 0))
                {
                    InitPropertyOpaqueUpgrade();
                }
                return _OpaqueUpgrade;
            }
            set
            {
                _initFlag1 &= ~0x1u;
                _flag1 |= 0x1u;
                _OpaqueUpgrade = value;
            }
        }

        internal OwinWebListener Listener
        {
            get
            {
                return _Listener;
            }
            set
            {
                _flag1 |= 0x2u;
                _Listener = value;
            }
        }

        private bool PropertiesContainsKey(string key)
        {
            switch (key.Length)
            {
                case 11:
                    if (((_flag0 & 0x40000u) != 0) && string.Equals(key, "server.User", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 12:
                    if (((_flag0 & 0x1u) != 0) && string.Equals(key, "owin.Version", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x8000u) != 0) && string.Equals(key, "host.AppName", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x10000u) != 0) && string.Equals(key, "host.AppMode", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 14:
                    if (((_flag0 & 0x2000000u) != 0) && string.Equals(key, "server.IsLocal", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag1 & 0x1u) != 0) && string.Equals(key, "opaque.Upgrade", StringComparison.Ordinal)) 
                    {
                        if (((_initFlag1 & 0x1u) == 0) || InitPropertyOpaqueUpgrade())
                        {
                            return true;
                        }
                    }
                   break;
                case 16:
                    if (((_flag0 & 0x40u) != 0) && string.Equals(key, "owin.RequestPath", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x200u) != 0) && string.Equals(key, "owin.RequestBody", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x4000u) != 0) && string.Equals(key, "host.TraceOutput", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x1000000u) != 0) && string.Equals(key, "server.LocalPort", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 17:
                    if (((_flag0 & 0x800u) != 0) && string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x400000u) != 0) && string.Equals(key, "server.RemotePort", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 18:
                    if (((_flag0 & 0x2u) != 0) && string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x8u) != 0) && string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x10u) != 0) && string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x40000000u) != 0) && string.Equals(key, "ssl.ChannelBinding", StringComparison.Ordinal)) 
                    {
                        if (((_initFlag0 & 0x40000000u) == 0) || InitPropertyChannelBinding())
                        {
                            return true;
                        }
                    }
                    if (((_flag0 & 0x80000000u) != 0) && string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 19:
                    if (((_flag0 & 0x100u) != 0) && string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x20000u) != 0) && string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x100000u) != 0) && string.Equals(key, "server.Capabilities", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x4000000u) != 0) && string.Equals(key, "server.ConnectionId", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 20:
                    if (((_flag0 & 0x4u) != 0) && string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x20u) != 0) && string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x400u) != 0) && string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 21:
                    if (((_flag0 & 0x800000u) != 0) && string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x10000000u) != 0) && string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 22:
                    if (((_flag0 & 0x200000u) != 0) && string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 23:
                    if (((_flag0 & 0x80u) != 0) && string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x1000u) != 0) && string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x80000u) != 0) && string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                    if (((_flag0 & 0x20000000u) != 0) && string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 25:
                    if (((_flag0 & 0x2000u) != 0) && string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 27:
                    if (((_flag0 & 0x8000000u) != 0) && string.Equals(key, "server.ConnectionDisconnect", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
                case 51:
                    if (((_flag1 & 0x2u) != 0) && string.Equals(key, "Microsoft.AspNet.Server.WebListener.OwinWebListener", StringComparison.Ordinal)) 
                    {
                        return true;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryGetValue(string key, out object value)
        {
            switch (key.Length)
            {
                case 11:
                    if (((_flag0 & 0x40000u) != 0) && string.Equals(key, "server.User", StringComparison.Ordinal)) 
                    {
                        value = User;
                        return true;
                    }
                   break;
                case 12:
                    if (((_flag0 & 0x1u) != 0) && string.Equals(key, "owin.Version", StringComparison.Ordinal)) 
                    {
                        value = OwinVersion;
                        return true;
                    }
                    if (((_flag0 & 0x8000u) != 0) && string.Equals(key, "host.AppName", StringComparison.Ordinal)) 
                    {
                        value = HostAppName;
                        return true;
                    }
                    if (((_flag0 & 0x10000u) != 0) && string.Equals(key, "host.AppMode", StringComparison.Ordinal)) 
                    {
                        value = HostAppMode;
                        return true;
                    }
                   break;
                case 14:
                    if (((_flag0 & 0x2000000u) != 0) && string.Equals(key, "server.IsLocal", StringComparison.Ordinal)) 
                    {
                        value = IsLocal;
                        return true;
                    }
                    if (((_flag1 & 0x1u) != 0) && string.Equals(key, "opaque.Upgrade", StringComparison.Ordinal)) 
                    {
                        value = OpaqueUpgrade;
                        // Delayed initialization in the property getter may determine that the element is not actually present
                        if (!((_flag1 & 0x1u) != 0))
                        {
                            value = default(OpaqueUpgrade);
                            return false;
                        }
                        return true;
                    }
                   break;
                case 16:
                    if (((_flag0 & 0x40u) != 0) && string.Equals(key, "owin.RequestPath", StringComparison.Ordinal)) 
                    {
                        value = RequestPath;
                        return true;
                    }
                    if (((_flag0 & 0x200u) != 0) && string.Equals(key, "owin.RequestBody", StringComparison.Ordinal)) 
                    {
                        value = RequestBody;
                        return true;
                    }
                    if (((_flag0 & 0x4000u) != 0) && string.Equals(key, "host.TraceOutput", StringComparison.Ordinal)) 
                    {
                        value = HostTraceOutput;
                        return true;
                    }
                    if (((_flag0 & 0x1000000u) != 0) && string.Equals(key, "server.LocalPort", StringComparison.Ordinal)) 
                    {
                        value = LocalPort;
                        return true;
                    }
                   break;
                case 17:
                    if (((_flag0 & 0x800u) != 0) && string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal)) 
                    {
                        value = ResponseBody;
                        return true;
                    }
                    if (((_flag0 & 0x400000u) != 0) && string.Equals(key, "server.RemotePort", StringComparison.Ordinal)) 
                    {
                        value = RemotePort;
                        return true;
                    }
                   break;
                case 18:
                    if (((_flag0 & 0x2u) != 0) && string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal)) 
                    {
                        value = CallCancelled;
                        return true;
                    }
                    if (((_flag0 & 0x8u) != 0) && string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal)) 
                    {
                        value = RequestMethod;
                        return true;
                    }
                    if (((_flag0 & 0x10u) != 0) && string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal)) 
                    {
                        value = RequestScheme;
                        return true;
                    }
                    if (((_flag0 & 0x40000000u) != 0) && string.Equals(key, "ssl.ChannelBinding", StringComparison.Ordinal)) 
                    {
                        value = ChannelBinding;
                        // Delayed initialization in the property getter may determine that the element is not actually present
                        if (!((_flag0 & 0x40000000u) != 0))
                        {
                            value = default(ChannelBinding);
                            return false;
                        }
                        return true;
                    }
                    if (((_flag0 & 0x80000000u) != 0) && string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal)) 
                    {
                        value = SendFileAsync;
                        return true;
                    }
                   break;
                case 19:
                    if (((_flag0 & 0x100u) != 0) && string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal)) 
                    {
                        value = RequestHeaders;
                        return true;
                    }
                    if (((_flag0 & 0x20000u) != 0) && string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal)) 
                    {
                        value = OnAppDisposing;
                        return true;
                    }
                    if (((_flag0 & 0x100000u) != 0) && string.Equals(key, "server.Capabilities", StringComparison.Ordinal)) 
                    {
                        value = ServerCapabilities;
                        return true;
                    }
                    if (((_flag0 & 0x4000000u) != 0) && string.Equals(key, "server.ConnectionId", StringComparison.Ordinal)) 
                    {
                        value = ConnectionId;
                        return true;
                    }
                   break;
                case 20:
                    if (((_flag0 & 0x4u) != 0) && string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal)) 
                    {
                        value = RequestProtocol;
                        return true;
                    }
                    if (((_flag0 & 0x20u) != 0) && string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal)) 
                    {
                        value = RequestPathBase;
                        return true;
                    }
                    if (((_flag0 & 0x400u) != 0) && string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal)) 
                    {
                        value = ResponseHeaders;
                        return true;
                    }
                   break;
                case 21:
                    if (((_flag0 & 0x800000u) != 0) && string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal)) 
                    {
                        value = LocalIpAddress;
                        return true;
                    }
                    if (((_flag0 & 0x10000000u) != 0) && string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal)) 
                    {
                        value = ClientCert;
                        return true;
                    }
                   break;
                case 22:
                    if (((_flag0 & 0x200000u) != 0) && string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal)) 
                    {
                        value = RemoteIpAddress;
                        return true;
                    }
                   break;
                case 23:
                    if (((_flag0 & 0x80u) != 0) && string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal)) 
                    {
                        value = RequestQueryString;
                        return true;
                    }
                    if (((_flag0 & 0x1000u) != 0) && string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal)) 
                    {
                        value = ResponseStatusCode;
                        return true;
                    }
                    if (((_flag0 & 0x80000u) != 0) && string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal)) 
                    {
                        value = OnSendingHeaders;
                        return true;
                    }
                    if (((_flag0 & 0x20000000u) != 0) && string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal)) 
                    {
                        value = LoadClientCert;
                        return true;
                    }
                   break;
                case 25:
                    if (((_flag0 & 0x2000u) != 0) && string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal)) 
                    {
                        value = ResponseReasonPhrase;
                        return true;
                    }
                   break;
                case 27:
                    if (((_flag0 & 0x8000000u) != 0) && string.Equals(key, "server.ConnectionDisconnect", StringComparison.Ordinal)) 
                    {
                        value = ConnectionDisconnect;
                        return true;
                    }
                   break;
                case 51:
                    if (((_flag1 & 0x2u) != 0) && string.Equals(key, "Microsoft.AspNet.Server.WebListener.OwinWebListener", StringComparison.Ordinal)) 
                    {
                        value = Listener;
                        return true;
                    }
                   break;
            }
            value = null;
            return false;
        }

        private bool PropertiesTrySetValue(string key, object value)
        {
            switch (key.Length)
            {
                case 11:
                    if (string.Equals(key, "server.User", StringComparison.Ordinal)) 
                    {
                        User = (System.Security.Principal.IPrincipal)value;
                        return true;
                    }
                   break;
                case 12:
                    if (string.Equals(key, "owin.Version", StringComparison.Ordinal)) 
                    {
                        OwinVersion = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "host.AppName", StringComparison.Ordinal)) 
                    {
                        HostAppName = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "host.AppMode", StringComparison.Ordinal)) 
                    {
                        HostAppMode = (string)value;
                        return true;
                    }
                   break;
                case 14:
                    if (string.Equals(key, "server.IsLocal", StringComparison.Ordinal)) 
                    {
                        IsLocal = (bool)value;
                        return true;
                    }
                    if (string.Equals(key, "opaque.Upgrade", StringComparison.Ordinal)) 
                    {
                        OpaqueUpgrade = (OpaqueUpgrade)value;
                        return true;
                    }
                   break;
                case 16:
                    if (string.Equals(key, "owin.RequestPath", StringComparison.Ordinal)) 
                    {
                        RequestPath = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.RequestBody", StringComparison.Ordinal)) 
                    {
                        RequestBody = (Stream)value;
                        return true;
                    }
                    if (string.Equals(key, "host.TraceOutput", StringComparison.Ordinal)) 
                    {
                        HostTraceOutput = (TextWriter)value;
                        return true;
                    }
                    if (string.Equals(key, "server.LocalPort", StringComparison.Ordinal)) 
                    {
                        LocalPort = (string)value;
                        return true;
                    }
                   break;
                case 17:
                    if (string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal)) 
                    {
                        ResponseBody = (Stream)value;
                        return true;
                    }
                    if (string.Equals(key, "server.RemotePort", StringComparison.Ordinal)) 
                    {
                        RemotePort = (string)value;
                        return true;
                    }
                   break;
                case 18:
                    if (string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal)) 
                    {
                        CallCancelled = (CancellationToken)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal)) 
                    {
                        RequestMethod = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal)) 
                    {
                        RequestScheme = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "ssl.ChannelBinding", StringComparison.Ordinal)) 
                    {
                        ChannelBinding = (ChannelBinding)value;
                        return true;
                    }
                    if (string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal)) 
                    {
                        SendFileAsync = (Func<string, long, long?, CancellationToken, Task>)value;
                        return true;
                    }
                   break;
                case 19:
                    if (string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal)) 
                    {
                        RequestHeaders = (IDictionary<string, string[]>)value;
                        return true;
                    }
                    if (string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal)) 
                    {
                        OnAppDisposing = (CancellationToken)value;
                        return true;
                    }
                    if (string.Equals(key, "server.Capabilities", StringComparison.Ordinal)) 
                    {
                        ServerCapabilities = (IDictionary<string, object>)value;
                        return true;
                    }
                    if (string.Equals(key, "server.ConnectionId", StringComparison.Ordinal)) 
                    {
                        ConnectionId = (object)value;
                        return true;
                    }
                   break;
                case 20:
                    if (string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal)) 
                    {
                        RequestProtocol = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal)) 
                    {
                        RequestPathBase = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal)) 
                    {
                        ResponseHeaders = (IDictionary<string, string[]>)value;
                        return true;
                    }
                   break;
                case 21:
                    if (string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal)) 
                    {
                        LocalIpAddress = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal)) 
                    {
                        ClientCert = (object)value;
                        return true;
                    }
                   break;
                case 22:
                    if (string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal)) 
                    {
                        RemoteIpAddress = (string)value;
                        return true;
                    }
                   break;
                case 23:
                    if (string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal)) 
                    {
                        RequestQueryString = (string)value;
                        return true;
                    }
                    if (string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal)) 
                    {
                        ResponseStatusCode = (int?)value;
                        return true;
                    }
                    if (string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal)) 
                    {
                        OnSendingHeaders = (Action<Action<object>, object>)value;
                        return true;
                    }
                    if (string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal)) 
                    {
                        LoadClientCert = (Func<Task>)value;
                        return true;
                    }
                   break;
                case 25:
                    if (string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal)) 
                    {
                        ResponseReasonPhrase = (string)value;
                        return true;
                    }
                   break;
                case 27:
                    if (string.Equals(key, "server.ConnectionDisconnect", StringComparison.Ordinal)) 
                    {
                        ConnectionDisconnect = (CancellationToken)value;
                        return true;
                    }
                   break;
                case 51:
                    if (string.Equals(key, "Microsoft.AspNet.Server.WebListener.OwinWebListener", StringComparison.Ordinal)) 
                    {
                        Listener = (OwinWebListener)value;
                        return true;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryRemove(string key)
        {
            switch (key.Length)
            {
                case 11:
                    if (((_flag0 & 0x40000u) != 0) && string.Equals(key, "server.User", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x40000u;
                        _User = default(System.Security.Principal.IPrincipal);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 12:
                    if (((_flag0 & 0x1u) != 0) && string.Equals(key, "owin.Version", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x1u;
                        _OwinVersion = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x8000u) != 0) && string.Equals(key, "host.AppName", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x8000u;
                        _HostAppName = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x10000u) != 0) && string.Equals(key, "host.AppMode", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x10000u;
                        _HostAppMode = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 14:
                    if (((_flag0 & 0x2000000u) != 0) && string.Equals(key, "server.IsLocal", StringComparison.Ordinal)) 
                    {
                        _initFlag0 &= ~0x2000000u;
                        _flag0 &= ~0x2000000u;
                        _IsLocal = default(bool);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag1 & 0x1u) != 0) && string.Equals(key, "opaque.Upgrade", StringComparison.Ordinal)) 
                    {
                        _initFlag1 &= ~0x1u;
                        _flag1 &= ~0x1u;
                        _OpaqueUpgrade = default(OpaqueUpgrade);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 16:
                    if (((_flag0 & 0x40u) != 0) && string.Equals(key, "owin.RequestPath", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x40u;
                        _RequestPath = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x200u) != 0) && string.Equals(key, "owin.RequestBody", StringComparison.Ordinal)) 
                    {
                        _initFlag0 &= ~0x200u;
                        _flag0 &= ~0x200u;
                        _RequestBody = default(Stream);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x4000u) != 0) && string.Equals(key, "host.TraceOutput", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x4000u;
                        _HostTraceOutput = default(TextWriter);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x1000000u) != 0) && string.Equals(key, "server.LocalPort", StringComparison.Ordinal)) 
                    {
                        _initFlag0 &= ~0x1000000u;
                        _flag0 &= ~0x1000000u;
                        _LocalPort = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 17:
                    if (((_flag0 & 0x800u) != 0) && string.Equals(key, "owin.ResponseBody", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x800u;
                        _ResponseBody = default(Stream);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x400000u) != 0) && string.Equals(key, "server.RemotePort", StringComparison.Ordinal)) 
                    {
                        _initFlag0 &= ~0x400000u;
                        _flag0 &= ~0x400000u;
                        _RemotePort = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 18:
                    if (((_flag0 & 0x2u) != 0) && string.Equals(key, "owin.CallCancelled", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x2u;
                        _CallCancelled = default(CancellationToken);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x8u) != 0) && string.Equals(key, "owin.RequestMethod", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x8u;
                        _RequestMethod = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x10u) != 0) && string.Equals(key, "owin.RequestScheme", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x10u;
                        _RequestScheme = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x40000000u) != 0) && string.Equals(key, "ssl.ChannelBinding", StringComparison.Ordinal)) 
                    {
                        _initFlag0 &= ~0x40000000u;
                        _flag0 &= ~0x40000000u;
                        _ChannelBinding = default(ChannelBinding);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x80000000u) != 0) && string.Equals(key, "sendfile.SendAsync", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x80000000u;
                        _SendFileAsync = default(Func<string, long, long?, CancellationToken, Task>);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 19:
                    if (((_flag0 & 0x100u) != 0) && string.Equals(key, "owin.RequestHeaders", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x100u;
                        _RequestHeaders = default(IDictionary<string, string[]>);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x20000u) != 0) && string.Equals(key, "host.OnAppDisposing", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x20000u;
                        _OnAppDisposing = default(CancellationToken);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x100000u) != 0) && string.Equals(key, "server.Capabilities", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x100000u;
                        _ServerCapabilities = default(IDictionary<string, object>);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x4000000u) != 0) && string.Equals(key, "server.ConnectionId", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x4000000u;
                        _ConnectionId = default(object);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 20:
                    if (((_flag0 & 0x4u) != 0) && string.Equals(key, "owin.RequestProtocol", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x4u;
                        _RequestProtocol = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x20u) != 0) && string.Equals(key, "owin.RequestPathBase", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x20u;
                        _RequestPathBase = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x400u) != 0) && string.Equals(key, "owin.ResponseHeaders", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x400u;
                        _ResponseHeaders = default(IDictionary<string, string[]>);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 21:
                    if (((_flag0 & 0x800000u) != 0) && string.Equals(key, "server.LocalIpAddress", StringComparison.Ordinal)) 
                    {
                        _initFlag0 &= ~0x800000u;
                        _flag0 &= ~0x800000u;
                        _LocalIpAddress = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x10000000u) != 0) && string.Equals(key, "ssl.ClientCertificate", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x10000000u;
                        _ClientCert = default(object);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 22:
                    if (((_flag0 & 0x200000u) != 0) && string.Equals(key, "server.RemoteIpAddress", StringComparison.Ordinal)) 
                    {
                        _initFlag0 &= ~0x200000u;
                        _flag0 &= ~0x200000u;
                        _RemoteIpAddress = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 23:
                    if (((_flag0 & 0x80u) != 0) && string.Equals(key, "owin.RequestQueryString", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x80u;
                        _RequestQueryString = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x1000u) != 0) && string.Equals(key, "owin.ResponseStatusCode", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x1000u;
                        _ResponseStatusCode = default(int?);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x80000u) != 0) && string.Equals(key, "server.OnSendingHeaders", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x80000u;
                        _OnSendingHeaders = default(Action<Action<object>, object>);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                    if (((_flag0 & 0x20000000u) != 0) && string.Equals(key, "ssl.LoadClientCertAsync", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x20000000u;
                        _LoadClientCert = default(Func<Task>);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 25:
                    if (((_flag0 & 0x2000u) != 0) && string.Equals(key, "owin.ResponseReasonPhrase", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x2000u;
                        _ResponseReasonPhrase = default(string);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 27:
                    if (((_flag0 & 0x8000000u) != 0) && string.Equals(key, "server.ConnectionDisconnect", StringComparison.Ordinal)) 
                    {
                        _flag0 &= ~0x8000000u;
                        _ConnectionDisconnect = default(CancellationToken);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
                case 51:
                    if (((_flag1 & 0x2u) != 0) && string.Equals(key, "Microsoft.AspNet.Server.WebListener.OwinWebListener", StringComparison.Ordinal)) 
                    {
                        _flag1 &= ~0x2u;
                        _Listener = default(OwinWebListener);
                        // This can return true incorrectly for values that delayed initialization may determine are not actually present.
                        return true;
                    }
                   break;
            }
            return false;
        }

        private IEnumerable<string> PropertiesKeys()
        {
            if (((_flag0 & 0x1u) != 0))
            {
                yield return "owin.Version";
            }
            if (((_flag0 & 0x2u) != 0))
            {
                yield return "owin.CallCancelled";
            }
            if (((_flag0 & 0x4u) != 0))
            {
                yield return "owin.RequestProtocol";
            }
            if (((_flag0 & 0x8u) != 0))
            {
                yield return "owin.RequestMethod";
            }
            if (((_flag0 & 0x10u) != 0))
            {
                yield return "owin.RequestScheme";
            }
            if (((_flag0 & 0x20u) != 0))
            {
                yield return "owin.RequestPathBase";
            }
            if (((_flag0 & 0x40u) != 0))
            {
                yield return "owin.RequestPath";
            }
            if (((_flag0 & 0x80u) != 0))
            {
                yield return "owin.RequestQueryString";
            }
            if (((_flag0 & 0x100u) != 0))
            {
                yield return "owin.RequestHeaders";
            }
            if (((_flag0 & 0x200u) != 0))
            {
                yield return "owin.RequestBody";
            }
            if (((_flag0 & 0x400u) != 0))
            {
                yield return "owin.ResponseHeaders";
            }
            if (((_flag0 & 0x800u) != 0))
            {
                yield return "owin.ResponseBody";
            }
            if (((_flag0 & 0x1000u) != 0))
            {
                yield return "owin.ResponseStatusCode";
            }
            if (((_flag0 & 0x2000u) != 0))
            {
                yield return "owin.ResponseReasonPhrase";
            }
            if (((_flag0 & 0x4000u) != 0))
            {
                yield return "host.TraceOutput";
            }
            if (((_flag0 & 0x8000u) != 0))
            {
                yield return "host.AppName";
            }
            if (((_flag0 & 0x10000u) != 0))
            {
                yield return "host.AppMode";
            }
            if (((_flag0 & 0x20000u) != 0))
            {
                yield return "host.OnAppDisposing";
            }
            if (((_flag0 & 0x40000u) != 0))
            {
                yield return "server.User";
            }
            if (((_flag0 & 0x80000u) != 0))
            {
                yield return "server.OnSendingHeaders";
            }
            if (((_flag0 & 0x100000u) != 0))
            {
                yield return "server.Capabilities";
            }
            if (((_flag0 & 0x200000u) != 0))
            {
                yield return "server.RemoteIpAddress";
            }
            if (((_flag0 & 0x400000u) != 0))
            {
                yield return "server.RemotePort";
            }
            if (((_flag0 & 0x800000u) != 0))
            {
                yield return "server.LocalIpAddress";
            }
            if (((_flag0 & 0x1000000u) != 0))
            {
                yield return "server.LocalPort";
            }
            if (((_flag0 & 0x2000000u) != 0))
            {
                yield return "server.IsLocal";
            }
            if (((_flag0 & 0x4000000u) != 0))
            {
                yield return "server.ConnectionId";
            }
            if (((_flag0 & 0x8000000u) != 0))
            {
                yield return "server.ConnectionDisconnect";
            }
            if (((_flag0 & 0x10000000u) != 0))
            {
                yield return "ssl.ClientCertificate";
            }
            if (((_flag0 & 0x20000000u) != 0))
            {
                yield return "ssl.LoadClientCertAsync";
            }
            if (((_flag0 & 0x40000000u) != 0))
            {
                if (((_initFlag0 & 0x40000000u) == 0) || InitPropertyChannelBinding())
                {
                    yield return "ssl.ChannelBinding";
                }
            }
            if (((_flag0 & 0x80000000u) != 0))
            {
                yield return "sendfile.SendAsync";
            }
            if (((_flag1 & 0x1u) != 0))
            {
                if (((_initFlag1 & 0x1u) == 0) || InitPropertyOpaqueUpgrade())
                {
                    yield return "opaque.Upgrade";
                }
            }
            if (((_flag1 & 0x2u) != 0))
            {
                yield return "Microsoft.AspNet.Server.WebListener.OwinWebListener";
            }
        }

        private IEnumerable<object> PropertiesValues()
        {
            if (((_flag0 & 0x1u) != 0))
            {
                yield return OwinVersion;
            }
            if (((_flag0 & 0x2u) != 0))
            {
                yield return CallCancelled;
            }
            if (((_flag0 & 0x4u) != 0))
            {
                yield return RequestProtocol;
            }
            if (((_flag0 & 0x8u) != 0))
            {
                yield return RequestMethod;
            }
            if (((_flag0 & 0x10u) != 0))
            {
                yield return RequestScheme;
            }
            if (((_flag0 & 0x20u) != 0))
            {
                yield return RequestPathBase;
            }
            if (((_flag0 & 0x40u) != 0))
            {
                yield return RequestPath;
            }
            if (((_flag0 & 0x80u) != 0))
            {
                yield return RequestQueryString;
            }
            if (((_flag0 & 0x100u) != 0))
            {
                yield return RequestHeaders;
            }
            if (((_flag0 & 0x200u) != 0))
            {
                yield return RequestBody;
            }
            if (((_flag0 & 0x400u) != 0))
            {
                yield return ResponseHeaders;
            }
            if (((_flag0 & 0x800u) != 0))
            {
                yield return ResponseBody;
            }
            if (((_flag0 & 0x1000u) != 0))
            {
                yield return ResponseStatusCode;
            }
            if (((_flag0 & 0x2000u) != 0))
            {
                yield return ResponseReasonPhrase;
            }
            if (((_flag0 & 0x4000u) != 0))
            {
                yield return HostTraceOutput;
            }
            if (((_flag0 & 0x8000u) != 0))
            {
                yield return HostAppName;
            }
            if (((_flag0 & 0x10000u) != 0))
            {
                yield return HostAppMode;
            }
            if (((_flag0 & 0x20000u) != 0))
            {
                yield return OnAppDisposing;
            }
            if (((_flag0 & 0x40000u) != 0))
            {
                yield return User;
            }
            if (((_flag0 & 0x80000u) != 0))
            {
                yield return OnSendingHeaders;
            }
            if (((_flag0 & 0x100000u) != 0))
            {
                yield return ServerCapabilities;
            }
            if (((_flag0 & 0x200000u) != 0))
            {
                yield return RemoteIpAddress;
            }
            if (((_flag0 & 0x400000u) != 0))
            {
                yield return RemotePort;
            }
            if (((_flag0 & 0x800000u) != 0))
            {
                yield return LocalIpAddress;
            }
            if (((_flag0 & 0x1000000u) != 0))
            {
                yield return LocalPort;
            }
            if (((_flag0 & 0x2000000u) != 0))
            {
                yield return IsLocal;
            }
            if (((_flag0 & 0x4000000u) != 0))
            {
                yield return ConnectionId;
            }
            if (((_flag0 & 0x8000000u) != 0))
            {
                yield return ConnectionDisconnect;
            }
            if (((_flag0 & 0x10000000u) != 0))
            {
                yield return ClientCert;
            }
            if (((_flag0 & 0x20000000u) != 0))
            {
                yield return LoadClientCert;
            }
            if (((_flag0 & 0x40000000u) != 0))
            {
                if (((_initFlag0 & 0x40000000u) == 0) || InitPropertyChannelBinding())
                {
                    yield return ChannelBinding;
                }
            }
            if (((_flag0 & 0x80000000u) != 0))
            {
                yield return SendFileAsync;
            }
            if (((_flag1 & 0x1u) != 0))
            {
                if (((_initFlag1 & 0x1u) == 0) || InitPropertyOpaqueUpgrade())
                {
                    yield return OpaqueUpgrade;
                }
            }
            if (((_flag1 & 0x2u) != 0))
            {
                yield return Listener;
            }
        }

        private IEnumerable<KeyValuePair<string, object>> PropertiesEnumerable()
        {
            if (((_flag0 & 0x1u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.Version", OwinVersion);
            }
            if (((_flag0 & 0x2u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.CallCancelled", CallCancelled);
            }
            if (((_flag0 & 0x4u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestProtocol", RequestProtocol);
            }
            if (((_flag0 & 0x8u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestMethod", RequestMethod);
            }
            if (((_flag0 & 0x10u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestScheme", RequestScheme);
            }
            if (((_flag0 & 0x20u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestPathBase", RequestPathBase);
            }
            if (((_flag0 & 0x40u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestPath", RequestPath);
            }
            if (((_flag0 & 0x80u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestQueryString", RequestQueryString);
            }
            if (((_flag0 & 0x100u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestHeaders", RequestHeaders);
            }
            if (((_flag0 & 0x200u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestBody", RequestBody);
            }
            if (((_flag0 & 0x400u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseHeaders", ResponseHeaders);
            }
            if (((_flag0 & 0x800u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseBody", ResponseBody);
            }
            if (((_flag0 & 0x1000u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseStatusCode", ResponseStatusCode);
            }
            if (((_flag0 & 0x2000u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseReasonPhrase", ResponseReasonPhrase);
            }
            if (((_flag0 & 0x4000u) != 0))
            {
                yield return new KeyValuePair<string, object>("host.TraceOutput", HostTraceOutput);
            }
            if (((_flag0 & 0x8000u) != 0))
            {
                yield return new KeyValuePair<string, object>("host.AppName", HostAppName);
            }
            if (((_flag0 & 0x10000u) != 0))
            {
                yield return new KeyValuePair<string, object>("host.AppMode", HostAppMode);
            }
            if (((_flag0 & 0x20000u) != 0))
            {
                yield return new KeyValuePair<string, object>("host.OnAppDisposing", OnAppDisposing);
            }
            if (((_flag0 & 0x40000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.User", User);
            }
            if (((_flag0 & 0x80000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.OnSendingHeaders", OnSendingHeaders);
            }
            if (((_flag0 & 0x100000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.Capabilities", ServerCapabilities);
            }
            if (((_flag0 & 0x200000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.RemoteIpAddress", RemoteIpAddress);
            }
            if (((_flag0 & 0x400000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.RemotePort", RemotePort);
            }
            if (((_flag0 & 0x800000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.LocalIpAddress", LocalIpAddress);
            }
            if (((_flag0 & 0x1000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.LocalPort", LocalPort);
            }
            if (((_flag0 & 0x2000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.IsLocal", IsLocal);
            }
            if (((_flag0 & 0x4000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.ConnectionId", ConnectionId);
            }
            if (((_flag0 & 0x8000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.ConnectionDisconnect", ConnectionDisconnect);
            }
            if (((_flag0 & 0x10000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("ssl.ClientCertificate", ClientCert);
            }
            if (((_flag0 & 0x20000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("ssl.LoadClientCertAsync", LoadClientCert);
            }
            if (((_flag0 & 0x40000000u) != 0))
            {
                if (((_initFlag0 & 0x40000000u) == 0) || InitPropertyChannelBinding())
                {
                    yield return new KeyValuePair<string, object>("ssl.ChannelBinding", ChannelBinding);
                }
            }
            if (((_flag0 & 0x80000000u) != 0))
            {
                yield return new KeyValuePair<string, object>("sendfile.SendAsync", SendFileAsync);
            }
            if (((_flag1 & 0x1u) != 0))
            {
                if (((_initFlag1 & 0x1u) == 0) || InitPropertyOpaqueUpgrade())
                {
                    yield return new KeyValuePair<string, object>("opaque.Upgrade", OpaqueUpgrade);
                }
            }
            if (((_flag1 & 0x2u) != 0))
            {
                yield return new KeyValuePair<string, object>("Microsoft.AspNet.Server.WebListener.OwinWebListener", Listener);
            }
        }
    }
}
