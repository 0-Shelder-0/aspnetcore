<Project Sdk="Microsoft.NET.Sdk.Razor">

  <PropertyGroup>
    <Description>ASP.NET Core Identity UI is the default Razor Pages built-in UI for the ASP.NET Core Identity framework.</Description>
    <RazorAssemblyDescription>Compiled Razor views assembly for the ASP.NET Core Identity UI package.</RazorAssemblyDescription>
    <TargetFramework>netcoreapp3.0</TargetFramework>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PackageTags>aspnetcore;identity;membership;razorpages</PackageTags>
    <IsShippingPackage>true</IsShippingPackage>
    <GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>
    <ProvideApplicationPartFactoryAttributeTypeName>Microsoft.AspNetCore.Mvc.ApplicationParts.NullApplicationPartFactory, Microsoft.AspNetCore.Mvc.Core</ProvideApplicationPartFactoryAttributeTypeName>
    <RazorCompileOnBuild>false</RazorCompileOnBuild>
    <RazorCompileOnPublish>false</RazorCompileOnPublish>
    <EnableDefaultRazorGenerateItems>false</EnableDefaultRazorGenerateItems>
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
    <AddRazorSupportForMvc>true</AddRazorSupportForMvc>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="wwwroot/**/LICENSE*" />
    <None Include="THIRD-PARTY-NOTICES.txt" Pack="true" PackagePath="/THIRD-PARTY-NOTICES.txt" />

    <Content Update="**\*.cshtml" Pack="false" />
    <Content Include="build\**" Pack="true" PackagePath="build\" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Newtonsoft.Json" />
    <Reference Include="Microsoft.AspNetCore.Identity" />
    <Reference Include="Microsoft.AspNetCore.Mvc" />
    <Reference Include="Microsoft.AspNetCore.StaticFiles" />
    <Reference Include="Microsoft.Extensions.FileProviders.Embedded" />
    <Reference Include="Microsoft.Extensions.Identity.Stores" />
    <Reference Include="Microsoft.AspNetCore.Hosting" />
  </ItemGroup>

  <ItemGroup>
    <UIFrameworkVersionMoniker Include="V3" />
    <UIFrameworkVersionMoniker Include="V4" />
  </ItemGroup>

  <Target Name="BuildRazorViews" DependsOnTargets="Compile" BeforeTargets="Build">
    <Message Text="Building razor views assemblies" Importance="High" />
    <MSbuild Projects="$(MSBuildThisFile)" Targets="BuildForUI" Properties="&#xD;&#xA;             BuildProjectReferences=false;&#xD;&#xA;             RazorCompileOnBuild=true;&#xD;&#xA;             UIFrameworkVersion=%(UIFrameworkVersionMoniker.Identity);&#xD;&#xA;             IntermediateOutputPath=$(IntermediateOutputPath)%(UIFrameworkVersionMoniker.Identity)\;" />

    <Copy SourceFiles="$(IntermediateOutputPath)%(UIFrameworkVersionMoniker.Identity)\$(TargetName).Views.%(UIFrameworkVersionMoniker.Identity).dll" DestinationFolder="$(OutDir)" SkipUnchangedFiles="$(SkipCopyUnchangedFiles)" OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" Retries="$(CopyRetryCount)" RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)" UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
      <Output TaskParameter="DestinationFiles" ItemName="_RazorAssembly" />
    </Copy>

    <Copy SourceFiles="$(IntermediateOutputPath)%(UIFrameworkVersionMoniker.Identity)\$(TargetName).Views.%(UIFrameworkVersionMoniker.Identity).pdb" DestinationFolder="$(OutDir)" SkipUnchangedFiles="$(SkipCopyUnchangedFiles)" OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" Retries="$(CopyRetryCount)" RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)" UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)" UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites" />
    </Copy>

    <Message Importance="High" Text="$(MSBuildProjectName) -&gt; %(_RazorAssembly.FullPath)" />

  </Target>

  <PropertyGroup>
    <RazorTargetName>Microsoft.AspNetCore.Identity.UI.Views.$(UIFrameworkVersion)</RazorTargetName>
  </PropertyGroup>

  <Target Name="SetupRazorInputs">
    <ItemGroup>
      <_RazorGenerate Include="Areas\Identity\Pages\$(UIFrameworkVersion)\**\*.cshtml" />

      <RazorGenerate Include="@(_RazorGenerate)" Link="Areas\Identity\Pages\%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>
  </Target>

  <Target Name="BuildForUI" DependsOnTargets="SetupRazorInputs;RazorCompile" />

  <Target Name="_GetRazorDlls" BeforeTargets="GetCopyToOutputDirectoryItems">

    <ItemGroup>
      <_GeneratedRazorViews Include="$(TargetDir)$(TargetName).Views.%(UIFrameworkVersionMoniker.Identity).dll" />
      <_GeneratedRazorViews Include="$(TargetDir)$(TargetName).Views.%(UIFrameworkVersionMoniker.Identity).pdb" />

      <AllItemsFullPathWithTargetPath Include="%(_GeneratedRazorViews.FullPath)">
        <TargetPath>%(FileName)%(Extension)</TargetPath>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </AllItemsFullPathWithTargetPath>
    </ItemGroup>
  </Target>

  <Target Name="_AddRazorDlls" BeforeTargets="BuiltProjectOutputGroup">
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Include="$(IntermediateOutputPath)%(UIFrameworkVersionMoniker.Identity)\$(TargetName).Views.%(UIFrameworkVersionMoniker.Identity).dll" />
    </ItemGroup>
  </Target>

  <Target Name="_AddRazorPdbs" BeforeTargets="DebugSymbolsProjectOutputGroup">
    <ItemGroup>
      <DebugSymbolsProjectOutputGroupOutput Include="$(IntermediateOutputPath)%(UIFrameworkVersionMoniker.Identity)\$(TargetName).Views.%(UIFrameworkVersionMoniker.Identity).pdb" />
    </ItemGroup>
  </Target>

  <Target Name="VerifyBuildOutputs" AfterTargets="BuildRazorViews">
    <ItemGroup>
      <ExpectedOutputFile Include="$(TargetDir)Microsoft.AspNetCore.Identity.UI.Views.V3.dll" />
      <ExpectedOutputFile Include="$(TargetDir)Microsoft.AspNetCore.Identity.UI.Views.V4.dll" />
    </ItemGroup>

    <Error Text="Unable to find precompiled view file %(ExpectedOutputFile.Identity)" Condition="!Exists('%(ExpectedOutputFile.Identity)')" />
  </Target>

  <!-- This target is used to support selecting the UI target framework at compile time -->
  <PropertyGroup>
    <GetCurrentProjectStaticWebAssetsDependsOn>_UpdateAssetsForBootstrapVersion</GetCurrentProjectStaticWebAssetsDependsOn>
    <_SelectedVersionPrefix Condition="'$(IdentityDefaultUIFramework)' == 'Bootstrap4'">V4</_SelectedVersionPrefix>
    <_SelectedVersionPrefix Condition="'$(IdentityDefaultUIFramework)' == 'Bootstrap3'">V3</_SelectedVersionPrefix>
  </PropertyGroup>

  <Target Name="_UpdateAssetsForBootstrapVersion">
    <ItemGroup>
      <!-- Filter static assets for the current project-->
      <_CurrentProjectStaticWebAssets Include="@(StaticWebAsset)" Condition="%(StaticWebAsset.SourceType) == ''" />

      <!-- Create V3 and V4 versions of the static assets with adjusted relative paths -->
      <_V4StaticAssets Include="$(MSBuildThisFileDirectory)wwwroot\V4\**" Exclude="**LICENSE*" />
      <_V4StaticAssetsWithRelativePath Include="@(_V4StaticAssets)">
        <RelativePath>%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
      </_V4StaticAssetsWithRelativePath>

      <_V3StaticAssets Include="$(MSBuildThisFileDirectory)wwwroot\V3\**" Exclude="**LICENSE*" />
      <_V3StaticAssetsWithRelativePath Include="@(_V3StaticAssets)">
        <RelativePath>%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
      </_V3StaticAssetsWithRelativePath>

      <!-- Remove the non selected version from the list of the static assets -->
      <StaticWebAsset Remove="@(_V4StaticAssets)" Condition="'$(IdentityDefaultUIFramework)' == 'Bootstrap3'" />
      <StaticWebAsset Remove="@(_V3StaticAssets)" Condition="'$(IdentityDefaultUIFramework)' == 'Bootstrap4'" />

      <!-- Put the selected version into a collection for batching below -->
      <_SelectedAssets Include="@(_V3StaticAssetsWithRelativePath)" Condition="'$(IdentityDefaultUIFramework)' == 'Bootstrap3'" />
      <_SelectedAssets Include="@(_V4StaticAssetsWithRelativePath)" Condition="'$(IdentityDefaultUIFramework)' == 'Bootstrap4'" />

      <!-- Batch over all remaining StaticWebAsset in the current project and update their metadata -->
      <_UpdatedAssets Include="%(Identity)" Condition="%(StaticWebAsset.SourceType) == ''">
        <RelativePath>@(_SelectedAssets->'%(RelativePath)')</RelativePath>
        <ContentRoot>@(StaticWebAsset->'%(ContentRoot)$(_SelectedVersionPrefix)\')</ContentRoot>
        <BasePath>Identity</BasePath>
        <SourceType>@(StaticWebAsset->'%(SourceType)')</SourceType>
        <SourceId>@(StaticWebAsset->'%(SourceId)')</SourceId>
      </_UpdatedAssets>

      <!-- Remove items with old metadata -->
      <StaticWebAsset Remove="@(_CurrentProjectStaticWebAssets)" />
      <!-- Add items with updated metadata -->
      <StaticWebAsset Include="@(_UpdatedAssets)" />

    </ItemGroup>
  </Target>

  <Target Name="_RemoveStaticWebAssetsFromPublish" BeforeTargets="GetCopyToPublishDirectoryItems">

    <ItemGroup>
      <_CurrentProjectStaticWebAssets Include="@(StaticWebAsset)" Condition="%(StaticWebAsset.SourceType) == ''">
        <ProjectRelativePath>$([MSBuild]::MakeRelative('$(MSBuildThisFileDirectory)', '%(StaticWebAsset.FullPath)'))</ProjectRelativePath>
      </_CurrentProjectStaticWebAssets>
    </ItemGroup>
        
    <ItemGroup>
      <_ContentToPreserve Include="@(ContentWithTargetPath)" Exclude="@(_CurrentProjectStaticWebAssets->'%(ProjectRelativePath)')" />
      <_ContentToExclude Include="@(ContentWithTargetPath)" Exclude="@(_ContentToPreserve)" />
      <ContentWithTargetPath Remove="@(_ContentToExclude)" />
      <ContentWithTargetPath Include="@(_ContentToExclude)">
        <CopyToPublishDirectory>Never</CopyToPublishDirectory>
      </ContentWithTargetPath>
    </ItemGroup>

  </Target>
</Project>
