<Project>

  <PropertyGroup>
    <DependencyAssetsDir>$(RepositoryRoot).deps\assets\</DependencyAssetsDir>
    <DependencyPackagesDir>$(RepositoryRoot).deps\packages\</DependencyPackagesDir>
    <!-- This file is used by the dotnet/cli to determine if our shared framework aligns with the version they pull. -->
    <BaseRuntimeVersionFileName>aspnetcore_base_runtime.version</BaseRuntimeVersionFileName>
    <BaseRuntimeVersionFile>$(IntermediateDir)$(BaseRuntimeVersionFileName)</BaseRuntimeVersionFile>
    <LatestRuntimeVersionFileName>latest.aspnetcore.version</LatestRuntimeVersionFileName>
    <LatestRuntimeVersionFile>$(IntermediateDir)$(LatestRuntimeVersionFileName)</LatestRuntimeVersionFile>

    <PublishDependsOn>
      PrepareOutputPaths;
      GetFilesToPublish;
      CopyToPublishArtifacts;
      PublishToAzureFeed;
      PublishToTransportFeed;
      $(PublishDependsOn);
    </PublishDependsOn>

    <!-- Settings for pushing to the transport feed -->
    <PushToBlobFeed_Overwrite Condition="'$(PushToBlobFeed_Overwrite)' == ''">false</PushToBlobFeed_Overwrite>
    <PushToBlobFeed_MaxClients Condition="'$(PushToBlobFeed_MaxClients)' == ''">8</PushToBlobFeed_MaxClients>
    <BlobFileRelativePathBase Condition="'$(BlobFileRelativePathBase)' == ''">assets</BlobFileRelativePathBase>
    <BlobFileRelativePathBase Condition="!HasTrailingSlash('$(BlobFileRelativePathBase)')">$(BlobFileRelativePathBase)/</BlobFileRelativePathBase>
  </PropertyGroup>

  <Target Name="Publish" DependsOnTargets="$(PublishDependsOn)" />

  <Target Name="GeneratePublishFiles" DependsOnTargets="ResolveCommitHash">
    <MakeDir Directories="$(IntermediateDir)" />

    <!--
      Used by the dotnet/cli build to determine which version of Microsoft.NETCore.App is used.
    -->
    <WriteLinesToFile File="$(BaseRuntimeVersionFile)" Lines="$(MicrosoftNETCoreApp21PackageVersion)" Overwrite="true" />

    <!--
      Used by the downloader scripts when pulling from a 'channel' instead of a specific version.
      The second line must be the package version.
      See dotnet-install.ps1/sh.
    -->
    <WriteLinesToFile
      File="$(LatestRuntimeVersionFile)"
      Lines="$(CommitHash);$(PackageVersion)"
      Overwrite="true" />

    <ItemGroup>
      <SharedFxVersionBadge Include="$(ArtifactsDir)$(SharedFxInstallerName)-%(AllSharedFxRIDs.Identity)-version-badge.svg" />
    </ItemGroup>

    <GenerateSvgBadge
      OutputPath="%(SharedFxVersionBadge.Identity)"
      Label="version"
      Value="$(PackageVersion)" />
  </Target>

  <Target Name="GetFilesToPublish" DependsOnTargets="GeneratePublishFiles">
    <PropertyGroup>
      <BlobBasePath>Runtime/$(PackageVersion)/</BlobBasePath>
      <AliasBlobBasePath>Runtime/$(SharedFxCliBlobChannel)/</AliasBlobBasePath>
      <PackageArchiveFileName>nuGetPackagesArchive-$(PackageVersion).lzma</PackageArchiveFileName>
      <InstallerBaseFileName>aspnetcore-runtime-$(PackageVersion)</InstallerBaseFileName>
      <InstallerAliasBaseFileName>aspnetcore-runtime-latest</InstallerAliasBaseFileName>
      <SymbolsArchiveBaseFileName>aspnetcore-runtime-symbols-$(PackageVersion)</SymbolsArchiveBaseFileName>
      <IntermediateInstallerBaseFileName>aspnetcore-runtime-internal-$(PackageVersion)</IntermediateInstallerBaseFileName>
    </PropertyGroup>

    <ItemGroup>
      <!-- symbols -->
      <FilesToPublish Include="$(DependencyAssetsDir)$(SymbolsArchiveBaseFileName)-%(RuntimeSymbolsArchive.Identity)%(RuntimeSymbolsArchive.FileExt)" Condition=" '%(RuntimeSymbolsArchive.Identity)' != '' ">
        <RelativeBlobPath>$(BlobBasePath)$(SymbolsArchiveBaseFileName)-%(RuntimeSymbolsArchive.Identity)%(RuntimeSymbolsArchive.FileExt)</RelativeBlobPath>
      </FilesToPublish>

      <!-- Intermediate files passed on to the dotnet-CLI. -->
      <FilesToPublish Include="$(DependencyAssetsDir)$(PackageArchiveFileName)" >
        <RelativeBlobPath>$(BlobBasePath)$(PackageArchiveFileName)</RelativeBlobPath>
      </FilesToPublish>

      <FilesToPublish Include="$(DependencyAssetsDir)$(IntermediateInstallerBaseFileName)-%(IntermediateInstaller.Identity)%(IntermediateInstaller.FileExt)" Condition=" '%(IntermediateInstaller.Identity)' != '' ">
        <RelativeBlobPath>$(BlobBasePath)$(IntermediateInstallerBaseFileName)-%(IntermediateInstaller.Identity)%(IntermediateInstaller.FileExt)</RelativeBlobPath>
      </FilesToPublish>

      <FilesToPublish Include="$(BaseRuntimeVersionFile)">
        <RelativeBlobPath>$(BlobBasePath)$(BaseRuntimeVersionFileName)</RelativeBlobPath>
        <ContentType>text/plain</ContentType>
      </FilesToPublish>

      <!-- Archive installers -->
      <FilesToPublish Include="$(DependencyAssetsDir)$(InstallerBaseFileName)-%(NativeInstaller.Identity)%(NativeInstaller.FileExt)" Condition=" '%(NativeInstaller.FileExt)' != '' ">
        <RelativeBlobPath>$(BlobBasePath)$(InstallerBaseFileName)-%(NativeInstaller.Identity)%(NativeInstaller.FileExt)</RelativeBlobPath>
      </FilesToPublish>

      <FilesToPublish Include="$(DependencyAssetsDir)$(InstallerBaseFileName)-%(NativeInstaller.Identity)%(NativeInstaller.FileExt)" Condition=" '%(NativeInstaller.FileExt)' != '' ">
        <RelativeBlobPath>$(AliasBlobBasePath)$(InstallerAliasBaseFileName)-%(NativeInstaller.Identity)%(NativeInstaller.FileExt)</RelativeBlobPath>
        <Overwrite>true</Overwrite>
      </FilesToPublish>

      <!-- Support for README badges and dotnet-install.ps1/sh -->
      <FilesToPublish Include="@(SharedFxVersionBadge)">
        <RelativeBlobPath>$(AliasBlobBasePath)%(SharedFxVersionBadge.FileName)%(SharedFxVersionBadge.Extension)</RelativeBlobPath>
        <CacheControl>no-cache, no-store, must-revalidate</CacheControl>
        <ContentType>image/svg+xml</ContentType>
        <Overwrite>true</Overwrite>
      </FilesToPublish>

      <FilesToPublish Include="$(LatestRuntimeVersionFile)">
        <RelativeBlobPath>$(AliasBlobBasePath)$(LatestRuntimeVersionFileName)</RelativeBlobPath>
        <CacheControl>no-cache, no-store, must-revalidate</CacheControl>
        <ContentType>text/plain</ContentType>
        <Overwrite>true</Overwrite>
      </FilesToPublish>

      <PackagesToPublish Include="$(DependencyPackagesDir)*.nupkg" Exclude="$(DependencyPackagesDir)*.symbols.nupkg" />
      <PackagesToPublish Include="$(DependencyPackagesDir)*.symbols.nupkg" Exclude="@(PackagesToPublish)" IsSymbolsPackage="true" />
    </ItemGroup>

    <Message Text="@(FilesToPublish -> '%(FullPath) -> %(RelativeBlobPath)','%0A')" />
  </Target>

  <Target Name="_CheckFilesToPublish">
    <ItemGroup>
      <_MissingFiles Include="%(FilesToPublish.Identity)" Condition=" ! Exists(%(FilesToPublish.Identity))" />
    </ItemGroup>

    <Error Text="Missing expected files:%0A - @(_MissingFiles, '%0A - ')" Condition="@(_MissingFiles->Count()) != 0" />
  </Target>

  <Target Name="CopyToPublishArtifacts" DependsOnTargets="_CheckFilesToPublish">
    <MakeDir Directories="$(ArtifactsDir)files\" />
    <Copy SourceFiles="@(FilesToPublish)" DestinationFolder="$(ArtifactsDir)files\" />
  </Target>

  <Target Name="PublishToAzureFeed"
    DependsOnTargets="_CheckFilesToPublish"
    Condition="'$(PublishToAzureFeed)' == 'true'">

    <PropertyGroup>
      <!--
        Allow setting AzureBlobRelativePathBase to control the base path of all uploaded blobs.
        AzureBlobRelativePathBase should end in a slash.
      -->
      <AzureBlobRelativePathBase Condition="'$(AzureBlobRelativePathBase)' != '' AND !HasTrailingSlash('$(AzureBlobRelativePathBase)')">$(AzureBlobRelativePathBase)/</AzureBlobRelativePathBase>
    </PropertyGroup>

    <ItemGroup Condition=" '$(AzureBlobRelativePathBase)' != '' ">
      <FilesToPublish Update="@(FilesToPublish)" RelativeBlobPath="$(AzureBlobRelativePathBase)%(FilesToPublish.RelativeBlobPath)" />
    </ItemGroup>

    <RepoTasks.PublishToAzureBlob
        AccountName="$(AzureAccountName)"
        SharedAccessToken="$(AzureSharedAccessToken)"
        ContainerName="$(AzureContainerName)"
        Files="@(FilesToPublish)" />
  </Target>

  <Target Name="PublishToTransportFeed"
    DependsOnTargets="GetFilesToPublish;_CheckFilesToPublish"
    Condition="'$(PublishToTransportFeed)' == 'true'">

    <ItemGroup>
      <PackagesToPublishToTransport Include="@(PackagesToPublish)" Condition=" '%(PackagesToPublish.IsSymbolsPackage)' != 'true' " />
      <FilesToPublishToTransport Include="@(FilesToPublish)" RelativeBlobPath="$(BlobFileRelativePathBase)%(FilesToPublish.RelativeBlobPath)" />
    </ItemGroup>

    <Message Text="Publishing %(PackagesToPublishToTransport.FullPath)" Importance="high" />
    <Message Text="@(FilesToPublishToTransport -> '%(FullPath) -> %(RelativeBlobPath)','%0A')" Importance="high" />

    <PushToBlobFeed ExpectedFeedUrl="$(PublishBlobFeedUrl)"
                    AccountKey="$(PublishBlobFeedKey)"
                    ItemsToPush="@(PackagesToPublishToTransport)"
                    Overwrite="$(PushToBlobFeed_Overwrite)"
                    MaxClients="$(PushToBlobFeed_MaxClients)"
                    Condition="@(PackagesToPublish->Count()) != 0" />

    <PushToBlobFeed ExpectedFeedUrl="$(PublishBlobFeedUrl)"
                    AccountKey="$(PublishBlobFeedKey)"
                    ItemsToPush="@(FilesToPublishToTransport)"
                    PublishFlatContainer="true"
                    Overwrite="$(PushToBlobFeed_Overwrite)"
                    MaxClients="$(PushToBlobFeed_MaxClients)" />
  </Target>

</Project>
