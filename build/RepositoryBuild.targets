<Project>
  <Target Name="_BuildRepositories">
    <ItemGroup>
      <BatchedRepository Include="$(MSBuildProjectFullPath)">
        <BuildGroup>%(RepositoryToBuildInOrder.Order)</BuildGroup>
        <Repository>%(RepositoryToBuildInOrder.Identity)</Repository>
        <AdditionalProperties>
          RepositoryToBuild=%(RepositoryToBuildInOrder.Identity);
          BuildRepositoryRoot=%(RepositoryToBuildInOrder.RepositoryPath)\;
          CommitHash=%(RepositoryToBuildInOrder.Commit)
        </AdditionalProperties>
      </BatchedRepository>
    </ItemGroup>

    <PropertyGroup>
      <BatchBuilds Condition="$(BuildInParallel) AND '$(CompileOnly)'=='true'">true</BatchBuilds>
      <BatchBuilds Condition="'$(BatchBuilds)'==''">false</BatchBuilds>
    </PropertyGroup>

    <MSBuild
      Projects="@(BatchedRepository)"
      BuildInParallel="$(BatchBuilds)"
      StopOnFirstFailure="true"
      Targets="_BuildRepository"
      Properties="BuildGroup=%(BatchedRepository.BuildGroup)" />
  </Target>

  <Target Name="_BuildRepository" DependsOnTargets="_PinVersions">
    <PropertyGroup>
      <!-- If there are duplicate properties, the properties which are defined later in the order would override the earlier ones -->
      <RepositoryBuildArguments>$(RepositoryBuildArguments) /p:BuildNumber=$(BuildNumber) /p:Configuration=$(Configuration) /p:CommitHash=$(CommitHash)</RepositoryBuildArguments>
      <RepositoryBuildArguments>$(RepositoryBuildArguments) /noconsolelogger '/l:RepoTasks.FlowLogger,$(MSBuildThisFileDirectory)tasks\bin\publish\RepoTasks.dll;Summary;FlowId=$(RepositoryToBuild)'</RepositoryBuildArguments>

      <BuildArguments>$(_RepositoryBuildTargets) $(RepositoryBuildArguments)</BuildArguments>
      <RepositoryArtifactsRoot>$(BuildRepositoryRoot)artifacts</RepositoryArtifactsRoot>
      <RepositoryArtifactsBuildDirectory>$(RepositoryArtifactsRoot)\build\</RepositoryArtifactsBuildDirectory>
      <RepositoryArtifactsMSBuildDirectory>$(RepositoryArtifactsRoot)\msbuild\</RepositoryArtifactsMSBuildDirectory>

      <_BuildScriptToExecute Condition="'$(OS)'!='Windows_NT'">build.sh</_BuildScriptToExecute>
      <_BuildScriptToExecute Condition="'$(OS)'=='Windows_NT'">build.cmd</_BuildScriptToExecute>
    </PropertyGroup>

    <Message Text="============ Building $(RepositoryToBuild) ============" Importance="High" />

    <!-- Copy Korebuild folder to individual repos to avoid downloading it again and again and also to
          prevent from taking in newer Korebuild changes when Universe is building midway -->
    <ItemGroup>
      <_KorebuildItems Include="$(RepositoryRoot).build\**\*.*" />
    </ItemGroup>

    <Message Text="Copying Korebuild from Universe to repository $(BuildRepositoryRoot)"/>
    <Copy SourceFiles="@(_KorebuildItems)" DestinationFolder="$(BuildRepositoryRoot).build\%(RecursiveDir)" SkipUnchangedFiles="true" UseHardlinksIfPossible="true" />

    <Exec
      Command="./$(_BuildScriptToExecute) $(BuildArguments)"
      EnvironmentVariables="KOREBUILD_SKIP_RUNTIME_INSTALL=1"
      IgnoreStandardErrorWarningFormat="true"
      WorkingDirectory="$(BuildRepositoryRoot)" />

    <ItemGroup>
      <RepositoryArtifacts Include="$(RepositoryArtifactsBuildDirectory)*" />
      <RepositorySymbolNupkgs Include="$(RepositoryArtifactsBuildDirectory)*.symbols.nupkg" />
      <RepositoryNupkgs Include="$(RepositoryArtifactsBuildDirectory)*.nupkg" Exclude="@(RepositorySymbolNupkgs)" />
      <RepositoryMSBuildArtifacts Include="$(RepositoryArtifactsMSBuildDirectory)**\*.*" />
    </ItemGroup>

    <Copy
       SourceFiles="@(RepositoryArtifacts)"
       DestinationFolder="$(BuildDir)" />

    <Move
       SourceFiles="@(RepositoryMSBuildArtifacts)"
       DestinationFolder="$(ArtifactsDir)msbuild\$(RepositoryToBuild)\%(RecursiveDir)" />

    <Message Text="Publishing the following packages to the volatile feed: @(RepositoryNupkgs -> '%(Filename)%(Extension)', ', ')"
      Condition="'$(PublishPackages)'=='true' AND '@(RepositoryNupkgs)' != ''" />

    <Exec
      Command="$(DotNetPath) $(PackagePublisherNetCoreApp) -d $(RepositoryArtifactsBuildDirectory) -f $(NuGetPublishVolatileFeed)"
      Condition="'$(PublishPackages)'=='true' AND '@(RepositoryNupkgs)' != ''" />

    <Message Text="============ Done building $(RepositoryToBuild) ============" Importance="High" />
  </Target>

  <Target Name="_PinVersions" DependsOnTargets="_FindDotNetPath">

    <PropertyGroup>
      <PinToolBinary>$(RepositoryRoot)tools\PinVersions\bin\$(Configuration)\netcoreapp1.1\PinVersions.dll</PinToolBinary>
      <PinVersionArgs>$(DotNetPath) $(PinToolBinary) --graph-specs-root &quot;$(_RestoreGraphSpecsDirectory) &quot; -s &quot;$(BuildDir) &quot; &quot;$(BuildRepositoryRoot) &quot;</PinVersionArgs>
      <PinVersionArgs Condition="Exists('$(_DependencyPackagesDirectory)')">$(PinVersionArgs) -s &quot;$(_DependencyPackagesDirectory) &quot;</PinVersionArgs>
    </PropertyGroup>

    <Exec Command="$(PinVersionArgs)" />
  </Target>
</Project>
