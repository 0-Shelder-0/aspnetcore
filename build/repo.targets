<Project>
  <Import Project="RepositoryBuild.targets" />

  <PropertyGroup>
    <NuGetPublishVolatileFeed>https://dotnet.myget.org/F/aspnetcore-volatile-dev/api/v2/package</NuGetPublishVolatileFeed>

    <_CloneRepositoryRoot>$(RepositoryRoot).r\</_CloneRepositoryRoot>
    <_DependencyBuildDirectory>$(RepositoryRoot).deps\build\</_DependencyBuildDirectory>
    <_DependencyPackagesDirectory>$(_DependencyBuildDirectory)</_DependencyPackagesDirectory>

    <_RepositoryListFileName>Repositories.props</_RepositoryListFileName>
    <_DefaultRepositoryList>$(MSBuildThisFileDirectory)$(_RepositoryListFileName)</_DefaultRepositoryList>
    <_DependencyRepositoryList>$(_DependencyBuildDirectory)$(_RepositoryListFileName)</_DependencyRepositoryList>
    <_RepositoryListToImport Condition="Exists('$(_DependencyRepositoryList)')">$(_DependencyRepositoryList)</_RepositoryListToImport>
    <_RepositoryListToImport Condition="!Exists('$(_DependencyRepositoryList)')">$(_DefaultRepositoryList)</_RepositoryListToImport>

    <_RepositoryBuildTargets Condition="'$(_RepositoryBuildTargets)'=='' AND '$(CompileOnly)'=='true'">/t:Package /t:VerifyPackages</_RepositoryBuildTargets>
    <_RepositoryBuildTargets Condition="'$(_RepositoryBuildTargets)'==''">/t:Verify</_RepositoryBuildTargets>

    <PrepareDependsOn>$(PrepareDependsOn);CleanArtifacts;CleanUniverseArtifacts</PrepareDependsOn>
    <CleanDependsOn>$(CleanDependsOn);CleanUniverseArtifacts</CleanDependsOn>
    <CompileDependsOn>$(CompileDependsOn);CloneRepositories;BuildRepositories</CompileDependsOn>
    <PackageDependsOn>$(PackageDependsOn);SplitPackages</PackageDependsOn>
    <VerifyDependsOn>$(VerifyDependsOn);VerifyCoherentVersions</VerifyDependsOn>
  </PropertyGroup>

  <Import Project="$(_RepositoryListToImport)" />

  <Target Name="CleanUniverseArtifacts">
    <RemoveDir Directories="$(_CloneRepositoryRoot)" Condition="Exists('$(_CloneRepositoryRoot)') AND '$(ClearRepositoryCloneRoot)' != 'false'" />
    <RemoveDir Directories="$(RepositoryRoot)obj" Condition="Exists('$(RepositoryRoot)obj')" />
  </Target>

  <Target Name="_PrepareRepositories">
    <ItemGroup Condition="'$(KOREBUILD_REPOSITORY_INCLUDE)'!=''">
      <_RepositoriesToInclude Include="$(KOREBUILD_REPOSITORY_INCLUDE)" />
      <Repository
        Remove="@(Repository)"
        Condition="'@(Repository)'!='@(_RepositoriesToInclude)' AND '%(Identity)'!=''" />
    </ItemGroup>

    <ItemGroup Condition="'$(KOREBUILD_REPOSITORY_EXCLUDE)'!=''">
      <RepositoriesToExclude Include="$(KOREBUILD_REPOSITORY_EXCLUDE)" />
      <Repository Remove="@(RepositoriesToExclude)" />
    </ItemGroup>

    <Error Text="KOREBUILD_REPOSITORY_EXCLUDE AND KOREBUILD_REPOSITORY_INCLUDE are specified."
      Condition="'$(KOREBUILD_REPOSITORY_INCLUDE)' != '' AND '$(KOREBUILD_REPOSITORY_EXCLUDE)' != ''" />

    <ItemGroup>
      <Repository Update="%(Identity)" RepositoryPath="$(_CloneRepositoryRoot)%(Identity)" />
    </ItemGroup>
  </Target>

  <Target Name="CloneRepositories" DependsOnTargets="_PrepareRepositories">
    <ItemGroup>
      <_CloneRepositories Include="@(Repository);@(ShippedRepository)" />
      <_CloneRepository Include="$(MSBuildProjectFullPath)">
        <AdditionalProperties>
          CloneRepository=%(_CloneRepositories.Identity);
          CloneUrl=%(_CloneRepositories.CloneUrl);
          CloneBranch=%(_CloneRepositories.Branch);
          CloneRepositoryCommit=%(_CloneRepositories.Commit);
          UseGateBranch=$(UseGateBranch)
        </AdditionalProperties>
      </_CloneRepository>
    </ItemGroup>

    <Message Text="Using the repository list information from '$(_RepositoryListToImport)' to clone ..." Importance="High" />

    <MakeDir Directories="$(_CloneRepositoryRoot)" />

    <MSBuild Projects="@(_CloneRepository)"
      Targets="_CloneRepository"
      BuildInParallel="$(BuildInParallel)" />

  </Target>

  <Target Name="_CloneRepository">
    <PropertyGroup>
      <ShallowClone Condition="'$(ShallowClone)'=='' OR '$(CloneRepositoryCommit)'!=''">false</ShallowClone>
      <_CloneArguments>git clone --quiet $(CloneUrl) $(CloneRepository)</_CloneArguments>
      <_CloneArguments Condition="'$(ShallowClone)'=='true'">$(_CloneArguments) --depth 1</_CloneArguments>
    </PropertyGroup>

    <Message Text="Cloning $(CloneRepository) ..." Importance="High" />
    <Exec
      Command="$(_CloneArguments) --branch $(CloneBranch)-gate"
      Condition="'$(UseGateBranch)'=='true'"
      IgnoreExitCode="true"
      IgnoreStandardErrorWarningFormat="true"
      WorkingDirectory="$(_CloneRepositoryRoot)">
      <Output TaskParameter="ExitCode" PropertyName="GateBranchExitCode" />
    </Exec>

    <Warning Text="Using $(CloneBranch)-gate for $(CloneRepository)"
      Condition="'$(GateBranchExitCode)'=='0'" />

    <Exec
      Command="$(_CloneArguments) --branch $(CloneBranch)"
      Condition="'$(GateBranchExitCode)'!='0'"
      WorkingDirectory="$(_CloneRepositoryRoot)" />

    <Message Text="Resetting $(CloneRepository) commit to $(CloneRepositoryCommit) ..." Importance="High" Condition="'$(CloneRepositoryCommit)'!=''"/>
    <Exec
      Command="git reset --quiet --hard $(CloneRepositoryCommit)"
      WorkingDirectory="$(_CloneRepositoryRoot)$(CloneRepository)"
      Condition="'$(CloneRepositoryCommit)'!=''" />
  </Target>

  <Target Name="BuildRepositories"
     DependsOnTargets="_PrepareRepositories;_CreateRepositoriesListWithCommits;ComputeGraph;_BuildRepositories" />

  <Target Name="ResolveRepoInfo" DependsOnTargets="_PrepareRepositories">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="GetArtifactInfo"
             Properties="RepositoryRoot=$(_CloneRepositoryRoot)%(Repository.Identity)\;Configuration=$(Configuration);BuildNumber=$(BuildNumber)"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="ArtifactInfo" />
    </MSBuild>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="ResolveSolutions"
             Properties="RepositoryRoot=$(_CloneRepositoryRoot)%(Repository.Identity)\;Configuration=$(Configuration);BuildNumber=$(BuildNumber)"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="Solution" />
    </MSBuild>

    <!--
      Analyze what was shipped in these repos.
      This is required so we can verify that cascading versions are consistent.
    -->
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="GetArtifactInfo"
             Properties="RepositoryRoot=$(_CloneRepositoryRoot)%(ShippedRepository.Identity)\;Configuration=$(Configuration);BuildNumber=$(BuildNumber);IsFinalBuild=true"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="ShippedArtifactInfo" />
    </MSBuild>
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="ResolveSolutions"
             Properties="RepositoryRoot=$(_CloneRepositoryRoot)%(ShippedRepository.Identity)\;Configuration=$(Configuration);BuildNumber=$(BuildNumber)"
             ContinueOnError="WarnAndContinue">
      <Output TaskParameter="TargetOutputs" ItemName="_NoBuildSolution" />
    </MSBuild>

    <ItemGroup>
      <Solution Update="@(Solution)" Build="true" />
      <_NoBuildSolution Update="@(_NoBuildSolution)" Build="false" />
      <Solution Include="@(_NoBuildSolution)" />
    </ItemGroup>

    <Error Text="No solutions were found in '$(_CloneRepositoryRoot)'" Condition="@(Solution->Count()) == 0" />
  </Target>

  <Target Name="ComputeGraph" DependsOnTargets="ResolveRepoInfo">
    <RepoTasks.AnalyzeBuildGraph
      Solutions="@(Solution)"
      Artifacts="@(ArtifactInfo)"
      ShippedArtifacts="@(ShippedArtifactInfo)"
      StartGraphAt="$(BuildGraphOf)"
      Properties="Configuration=$(Configuration);BuildNumber=$(BuildNumber)">
      <Output TaskParameter="RepositoryBuildOrder" ItemName="RepositoryBuildOrder" />
    </RepoTasks.AnalyzeBuildGraph>
  </Target>

  <Target Name="UpdateRepoLineups" DependsOnTargets="ResolveRepoInfo">
    <RepoTasks.GenerateLineup
      Artifacts="@(ArtifactInfo)"
      Repository="%(Repository.Identity)"
      OutputPath="$(_CloneRepositoryRoot)%(Repository.Identity)\build\dependencies.targets"
      UseFloatingVersions="true"
      BuildNumber="$(BuildNumber)" />
  </Target>

  <Target Name="GenerateLineup" DependsOnTargets="ResolveRepoInfo">
    <Message Text="Packages that will be produced:" Importance="High" />
    <Message Text="  - %(ArtifactInfo.PackageId)/%(Version)" Importance="High" Condition="'%(ArtifactType)' == 'NuGetPackage'" />

    <RepoTasks.GenerateLineup
      Artifacts="@(ArtifactInfo)"
      OutputPath="$(ArtifactsDir)dependencies.targets"
      UseFloatingVersions="false"
      BuildNumber="$(BuildNumber)" />
  </Target>

  <Target Name="SplitPackages">
    <ItemGroup>
      <PackageArtifactFile Include="$(BuildDir)*.nupkg" Exclude="$(BuildDir)*.symbols.nupkg" />
    </ItemGroup>

    <RepoTasks.CopyPackagesToSplitFolders
      Packages="@(PackageArtifact)"
      Files="@(PackageArtifactFile)"
      DestinationFolder="$(ArtifactsDir)" />
  </Target>

  <Target Name="VerifyCoherentVersions">
    <ItemGroup>
      <ShippingPackageFiles Include="$(ArtifactsDir)ship\*.nupkg" />
    </ItemGroup>

    <RepoTasks.VerifyCoherentVersions
      PackageFiles="@(ShippingPackageFiles)" />
  </Target>

  <Target Name="_CreateRepositoriesListWithCommits" DependsOnTargets="_GetRepositoryCommits">
    <PropertyGroup>
      <RepositoryFileWithCommit>$(BuildDir)$(_RepositoryListFileName)</RepositoryFileWithCommit>
    </PropertyGroup>
    <Copy
      SourceFiles="$(_DefaultRepositoryList)"
      DestinationFiles="$(RepositoryFileWithCommit)" />

    <XmlPoke
      XmlInputPath="$(RepositoryFileWithCommit)"
      Query="//Repository[@Include='%(Repository.Identity)']/@Commit"
      Value="%(Repository.Commit)" />

    <XmlPoke
      XmlInputPath="$(RepositoryFileWithCommit)"
      Query="//Repository[@Include='%(Repository.Identity)']/@CloneUrl"
      Value="%(Repository.CloneUrl)" />
  </Target>

  <!-- Based on the solution here: http://stackoverflow.com/a/11331566 -->
  <Target Name="_GetRepositoryCommits" Outputs="%(Repository.Identity)">
    <PropertyGroup>
      <!--
        Attempt to read environment variables set up by the CI's VCS Root if available.
        * BUILD_VCS_URL_<RepositoryName> gives us the clone URL for a repository
        * BUILD_VCS_NUMBER_<RepositoryName> gives us the commit hash for a repository.
      -->
      <_RepositoryName>$([System.String]::new('%(Repository.Identity)').Replace('.', '_'))</_RepositoryName>
      <_CloneUrl>$([System.Environment]::GetEnvironmentVariable("BUILD_VCS_URL_$(_RepositoryName)"))</_CloneUrl>
      <_CommitHash>$([System.Environment]::GetEnvironmentVariable("BUILD_VCS_NUMBER_$(_RepositoryName)"))</_CommitHash>
    </PropertyGroup>

    <Warning Text="%(Repository.Identity) has not been cloned."
      Condition="!Exists('%(Repository.RepositoryPath)')" />

    <GetGitCommitInfo
      WorkingDirectory="%(Repository.RepositoryPath)"
      Condition="'$(_CommitHash)'=='' AND Exists('%(Repository.RepositoryPath)')">

      <Output TaskParameter="CommitHash" PropertyName="_CommitHash" />
    </GetGitCommitInfo>

    <ItemGroup>
      <Repository Update="%(Identity)" Commit="$(_CommitHash)" />
      <Repository Update="%(Identity)" CloneUrl="$(_CloneUrl)" Condition="'$(_CloneUrl)'!=''" />
    </ItemGroup>

    <PropertyGroup>
      <_CommitHash></_CommitHash>
      <_CloneUrl></_CloneUrl>
    </PropertyGroup>
  </Target>

</Project>
