Expression block - Gen<Expr> - 115 - (0:0,0)
    Transition span - Gen<None> - [@] - SpanEditHandler;Accepts:None - (0:0,0) - Symbols:1
        CSharpSymbolType.Transition;[@];
    Code span - Gen<Expr> - [foo().bar("bi\"z", 4)("chained method; call").baz(@"bo""z", '\'', () => { return 4; }, (4+5+new { foo = bar[4] }))] - ImplicitExpressionEditHandler;Accepts:NonWhiteSpace;ImplicitExpression[RTD];K14 - (1:0,1) - Symbols:59
        CSharpSymbolType.Identifier;[foo];
        CSharpSymbolType.LeftParenthesis;[(];
        CSharpSymbolType.RightParenthesis;[)];
        CSharpSymbolType.Dot;[.];
        CSharpSymbolType.Identifier;[bar];
        CSharpSymbolType.LeftParenthesis;[(];
        CSharpSymbolType.StringLiteral;["bi\"z"];
        CSharpSymbolType.Comma;[,];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.IntegerLiteral;[4];
        CSharpSymbolType.RightParenthesis;[)];
        CSharpSymbolType.LeftParenthesis;[(];
        CSharpSymbolType.StringLiteral;["chained method; call"];
        CSharpSymbolType.RightParenthesis;[)];
        CSharpSymbolType.Dot;[.];
        CSharpSymbolType.Identifier;[baz];
        CSharpSymbolType.LeftParenthesis;[(];
        CSharpSymbolType.StringLiteral;[@"bo""z"];
        CSharpSymbolType.Comma;[,];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.CharacterLiteral;['\''];
        CSharpSymbolType.Comma;[,];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.LeftParenthesis;[(];
        CSharpSymbolType.RightParenthesis;[)];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.GreaterThanEqual;[=>];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.LeftBrace;[{];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.Keyword;[return];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.IntegerLiteral;[4];
        CSharpSymbolType.Semicolon;[;];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.RightBrace;[}];
        CSharpSymbolType.Comma;[,];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.LeftParenthesis;[(];
        CSharpSymbolType.IntegerLiteral;[4];
        CSharpSymbolType.Plus;[+];
        CSharpSymbolType.IntegerLiteral;[5];
        CSharpSymbolType.Plus;[+];
        CSharpSymbolType.Keyword;[new];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.LeftBrace;[{];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.Identifier;[foo];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.Assign;[=];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.Identifier;[bar];
        CSharpSymbolType.LeftBracket;[[];
        CSharpSymbolType.IntegerLiteral;[4];
        CSharpSymbolType.RightBracket;[]];
        CSharpSymbolType.WhiteSpace;[ ];
        CSharpSymbolType.RightBrace;[}];
        CSharpSymbolType.RightParenthesis;[)];
        CSharpSymbolType.RightParenthesis;[)];
